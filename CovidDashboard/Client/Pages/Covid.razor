@page "/covid"
@using CovidDashboard.Shared
@using System.Reflection
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h1>Covid Data</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (usStatus == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="control-section">
        <RadzenDropDown AllowClear="true" TValue="string"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                        Data="@properties" TextProperty="Stat" ValueProperty="PropertyName" Style="margin-bottom: 20px" Change="@(args => Change(args, "DropDown with custom filter operator"))" />

        <RadzenChart>
            <RadzenLineSeries Data="@ChartData" CategoryProperty="Date" Title="@selectedChart" ValueProperty="Value">
                <RadzenMarkers MarkerType="MarkerType.Circle" />
            </RadzenLineSeries>
            <RadzenValueAxis>
                <RadzenGridLines Visible="true" />
                <RadzenAxisTitle Text="Charting" />
            </RadzenValueAxis>
        </RadzenChart>
    </div>
}

@code {
    private USStatus usStatus;
    private List<DailyStatus> dailyStatuses;
    public List<LineChartData> ChartData;
    public IList<string> properties;
    public string selectedChart;

    public class LineChartData
    {
        public DateTime Date { get; set; }
        public double Value { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        CreatePropertiesDropdownItems();

        usStatus = await Http.GetFromJsonAsync<USStatus>("api/Covid/GetCurrentUSStats");
        dailyStatuses = await Http.GetFromJsonAsync<List<DailyStatus>>("api/Covid/GetTexasDailyStats");
        ChartData = new List<LineChartData>(dailyStatuses.Count);

        selectedChart = "Positive Increase";

        foreach (DailyStatus dailyStatus in dailyStatuses)
        {
            if(dailyStatus.DateChecked > DateTime.MinValue)
                ChartData.Add(new LineChartData { Date = new DateTime(dailyStatus.DateChecked.Year, dailyStatus.DateChecked.Month, dailyStatus.DateChecked.Day), Value = dailyStatus.PositiveIncrease});
        }
        Console.WriteLine("chart is " + ChartData.Count);
    }

    private void CreatePropertiesDropdownItems()
    {
        properties = new List<string>();
        var propertyInfo = typeof(DailyStatus).GetProperties();
        foreach (PropertyInfo info in propertyInfo)
        {
            properties.Add(info.Name);
        }
    }

    private void Change(object args, string dropdownWithCustomFilterOperator)
     {
        selectedChart = dropdownWithCustomFilterOperator.Trim();
        var newPropertyInfo = typeof(DailyStatus).GetProperty(selectedChart);
     

        ChartData.Clear();
        foreach (DailyStatus dailyStatus in dailyStatuses)
        {
            double result = 0.0;
            if(newPropertyInfo?.GetValue(dailyStatus, null) != null)
                double.TryParse(((string)newPropertyInfo.GetValue(dailyStatus, null)), out result);

            ChartData.Add(new LineChartData
            {
                Date = new DateTime(dailyStatus.DateChecked.Year, dailyStatus.DateChecked.Month, dailyStatus.DateChecked.Day),
                Value = result
            });
        }
    }
}
